Create a folder -> go inside the folder -> right click and open git bash

1) git init  -> start your git repository

2) git config --global user.name "akshat"    (only once it is required)

3) git config --global user.email "akshu20791@gmail.com"    (only once it is required)

4) git config --list (to check global configuration)

5) touch file1   (create a empty file in the folder)

6) git status   (you will see that the file is there is red color and msg coming that it is not ttracked)

7) git add .  (put all the files in the staging area)  (to put particular file in staging area  -> git add <<filename>> )

8) git status   (now the file is in staging area and waiting to be commited)

9) cat >> file1
hello world

press ctrl + D to exit

10) git status (you will see modified file1 )

11) git add . (to put the file in staging area) 

12) git commit -m "my first commit"      (putting the files from the staging area to the local repo) 

###################SKIP STAGING AREA #############################

13) touch testfile

14) git add testfile

15) git status

16) cat >> testfile
hello world

press ctrl + D to exit

17) git status   (you will see that testfile is modified)

18) git commit -a -m "second commit learning skip staging area" 

19) git status  (you will see that modified file is now gone and the modified test file has skipped staging area and moved to the local repo)

##############################################################################

####IF YOU WANT THE CHANGES YOU HAVE MADE IN THE FILE ################

20) touch file3

21) cat >> file3
hello world

ctrl + D to exit

22) git add .  

23) cat >> file3
edureka 

ctrl + D 

24) git diff     (difference between your previous file and modified file. If you want to know exactly what you changed but not which files were changes)

(you will see that edureka is added up ) 

#######################################################################################


###########REMOVING THE FILES IN GIT ################################


25) touch file6


26) git add file6

27) you can delete the file6 from folder  or (rm -f filename) 

28) git status  (you will see that file 6 is deleted)

29) git add .   (this will update my staging area)

30) git status   ( file6 is now deleted) 


################################################################################

########### UNSTAGE A FILE  #############################


31) touch file10

32) git add file10

33) git status

34) git rm --cached file10   (this will unstage your file10  - first method)

35) git status

36) git add file10

37) git restore --staged file10   (this will unstage your file10 - second method)

38) git status

#######################################################################################

################# FINDING THE COMMIT (TO SEE ALL THE COMMITS DONE ) ################################


39) git commit -m "fifth commit"

40) git log   (complete list of commit (versions) which you have created)

41) git log --oneline (it will give you the brief of the commit you have created)

42) git log --graph --all  (it will give you the commits as a graph (generally we use it in branching))

43) git log --oneline --graph --all  (it will give you commit as a graph (only commit messages and graph))

################################################################


























































